# Cursor Project Rules — CineChat
---
rule_type: always
---

## Контекст
Мы делаем **CineChat** — Next.js фронтенд и Node.js бэкенд для анонимных чатов по фильмам/сериалам. Минимум зависимостей, простая архитектура, аккуратный код.

## Технологии и стандарты
- **Frontend**: Next.js 14 (App Router), TypeScript, React Server/Client Components, TailwindCSS.
- **Backend**: Node 18+, Express, Socket.IO, better-sqlite3, CommonJS.
- **Тесты**:
  - Использовать **Jest** для backend и утилит.
  - Использовать **Playwright** или **React Testing Library** для frontend-компонентов.
  - Все новые фичи должны сопровождаться тестами.
  - После внесения изменений агент обязан запускать тесты (`npm test` или `pnpm test`) и показывать результат.

## Коммуникация
- REST (JSON) + Socket.IO (realtime).
- SQLite для хранения.
- Ошибки — через try/catch, пользователю — дружественные сообщения.

## UX-правила
- Анонимность без регистрации: cookie `sid`.
- Ник генерируется автоматически.
- Сообщения — оптимистично, рейтинг — обновляется realtime.
- На мобайле чат во всю ширину; на десктопе — 2 колонки.

## Правила тестов
- Перед выдачей кода → **план → код → тесты → прогон тестов → результаты**.
- Если тесты падают → исправление до зелёного билда.
- Покрывать:
  - backend: API endpoints (search, movie, chat, rating);
  - frontend: критичные компоненты (`Chat`, `Rating`);
  - e2e тестирование с использованием Playwright
- Для багфиксов сначала написать failing test, затем фикс.

## Что избегать
- Нет лишних зависимостей.
- Не тянуть TMDB-ключ на клиент.
- Не добавлять auth-провайдеры.

## Проверка задач
Перед выдачей патча:
1. Краткий план.
2. Список изменённых файлов.
3. Код изменений.
4. Тесты.
5. Результат прогона.
